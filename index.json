[{"body":"Effective Date: Feb. 1, 2022\nRootwork.org is committed to protecting the privacy of visitors to its website. We have established this privacy policy to explain what information we collect through our website and how it is used.\nRootwork.org is authored in Hugo, a static-site generator with a strong position on privacy.\nInformation we do (not) collect Rootwork.org does not set cookies or otherwise track you with analytics.\nWe do not provide opt-out mechanisms for GDPR, CalOPPA or PIPEDA as nothing is being collected.\nThird-party services Rootwork.org is hosted on GitHub. While we do not have access to web logs about visitors, GitHub does. These logs might include information such as your reported IP address, date and times of access, and pages viewed. If you are concerned about this data, consider using a VPN.\nWhen third-party social media is embedded (such as YouTube or Twitter) we use Hugo\u0026rsquo;s \u0026ldquo;simple\u0026rdquo; and \u0026ldquo;do not track\u0026rdquo; options, although some forms of tracking from these networks may still slip through.\nIf you click on social media icons to share content from this site or follow Rootwork.org, you may be tracked by these services as well.\nProtecting your privacy If third-party tracking concerns you, we recommend uBlock Origin, Privacy Badger, and Firefox\u0026rsquo;s Facebook Container to restrict or completely block what these third parties are able to collect about you. To see what trackers see about you, check out the EFF\u0026rsquo;s Cover Your Tracks project.\nFor even more thorough privacy options, the EFF\u0026rsquo;s Surveillance Self Defense guide is an invaluable resource.\nUpdates Any changes, additions or deletions to this page will be marked by a new \u0026ldquo;Effective Date\u0026rdquo; noted at the top of this page.\n","link":"https://rootwork.github.io/rootwork.org/privacy/","section":"","tags":null,"title":"Privacy policy"},{"body":"","link":"https://rootwork.github.io/rootwork.org/","section":"","tags":null,"title":""},{"body":" Progress Pride flag by Daniel Quasar Black Lives Matter ‚úäüèΩ Trans Rights Are Human Rights ‚õ∫ Houseless Neighbors Deserve Dignity Holy ü¶és and ü¶Ñs, it\u0026rsquo;s Ivan Boothe US-Pacific ‚òô Multnomah, Tsinook \u0026amp; Cowlitz lands ‚òô Portland, OR\nCurrent projects Premail, an easy-to-use component-based build system for MJML, the email templating language, with Handlebars templating, Sass styles, and extra options. GET: Gulp, ES6, Tailwind, a kickstart template for modern TailwindCSS development. Hugo Module Site, an example of how to use Hugo Modules in your Hugo site. rootwork/bash-scripts, helpful tools for image management, video manipulation, and image/video conversion. Responsive Tables Builder, a tool for creating mobile-first, accessible, responsive HTML data tables from data files, with CSS and without JS. Radical Icons, reusable SVG and PNG images for activist art and organizing. I\u0026rsquo;ve also been active in Drupal (especially nonprofit and community-oriented Drupal) since 2005. Find me at drupal.org. Ask me about Drupal (4.5 to 9) nptech (nonprofit/NGO tech) accessibility (a11y) and universal design (also sometimes called inclusive design) MJML and email coding generally Handlebars Sass and modern CSS Gulp 4 Back of the frontend Nodejs Hugo Also moderately experienced with bash scripting (and zsh), Tailwind CSS, SVGs and animation, Composer, CiviCRM, and using Linux in day-to-day work and development.\nCoding is just a small part of who I am Technology is a means to an end, and shiny tech is not always the best means.\nI\u0026rsquo;ve worked as a human rights advocate, a community organizer, and a nonprofit communications manager. I\u0026rsquo;ve been on the board of a justice studies association, helped nominate people for the Nobel Peace Prize, wrote about third-party nonviolent intervention and used electronic civil disobedience to fight insecure voting systems.\nReally all my technological expertise and interest stems from those larger objectives for social change.\nI\u0026rsquo;m also active in üö≤ re-thinking urban spaces, ü•ï local food cooperatives, and üîî semi-professional handbell performance.\n","link":"https://rootwork.github.io/rootwork.org/about/","section":"","tags":null,"title":"About Ivan Boothe \u0026 Rootwork.org"},{"body":"","link":"https://rootwork.github.io/rootwork.org/blog/","section":"blog","tags":null,"title":"Rootwork.org blog"},{"body":"","link":"https://rootwork.github.io/rootwork.org/blog/2014/","section":"year","tags":null,"title":"Archives: 2014"},{"body":"","link":"https://rootwork.github.io/rootwork.org/blog/2014/04/","section":"month","tags":null,"title":"Archives: April 2014"},{"body":"","link":"https://rootwork.github.io/rootwork.org/categories/","section":"categories","tags":null,"title":"Categories"},{"body":"","link":"https://rootwork.github.io/rootwork.org/tags/devsigner/","section":"tags","tags":null,"title":"Devsigner"},{"body":"","link":"https://rootwork.github.io/rootwork.org/tags/drupal/","section":"tags","tags":null,"title":"Drupal"},{"body":"","link":"https://rootwork.github.io/rootwork.org/categories/frontend-development/","section":"categories","tags":null,"title":"Frontend development"},{"body":"Devsigner is celebrating the cross-overs, the multi-disciplinarians, the coders who paint and the designers who send pull requests \u0026mdash; and those who want to develop some new left-right brain skills.\nWe\u0026rsquo;re looking for folks to break out of their familiar meetup silos and apply their knowledge across the crafts of development and design.\nJoin me at Devsigner in Portland, Oregon, May 23-25!\nTickets are now on sale, and session submissions are open until this Friday, May 2!\nDevsigner: Portland, OR, May 23-25 Sessions will include things like: responsive web development for graphic designers color theory for coders industrial design for web apps why bad user experience is a bug what web technologies can learn from analog design iterative design in open-source communities your great idea \u0026mdash; submit a session now! We\u0026rsquo;re going to mix it up with a variety of session formats: Traditional presentations (45\u0026ndash;60 minutes) Panel and roundtable discussions (45\u0026ndash;60 minutes) Hands-on, deep-dive workshops (2 hours Friday, 3 hours Saturday and Sunday) Lightning talks on Saturday night (more information to come) We\u0026rsquo;re also kicking off the event with a keynote presentation from a surprise guest!\nWho should attend? graphic designers who want to hone their web design chops developers who want to the beauty of their projects to match the beauty of their code artists who are tired of ugly or unusable websites branding experts who want to tell developers a story about the cobbler\u0026rsquo;s children Sass/Puppet/Angular/Grunt/Node evangelists who want to spread the good word you! I hope to see you there!\n","link":"https://rootwork.github.io/rootwork.org/blog/2014/04/join-me-devsigner-conference-portland-may-designers-developers-join-forces/","section":"blog","tags":["Devsigner","Drupal"],"title":"Join me at the Devsigner conference in Portland this May: Designers and developers join forces!"},{"body":"","link":"https://rootwork.github.io/rootwork.org/month/","section":"month","tags":null,"title":"Month"},{"body":"","link":"https://rootwork.github.io/rootwork.org/categories/planet-drupal/","section":"categories","tags":null,"title":"Planet Drupal"},{"body":"","link":"https://rootwork.github.io/rootwork.org/tags/","section":"tags","tags":null,"title":"Tags"},{"body":"","link":"https://rootwork.github.io/rootwork.org/year/","section":"year","tags":null,"title":"Year"},{"body":"","link":"https://rootwork.github.io/rootwork.org/tags/activism/","section":"tags","tags":null,"title":"activism"},{"body":"","link":"https://rootwork.github.io/rootwork.org/blog/2014/03/","section":"month","tags":null,"title":"Archives: March 2014"},{"body":"","link":"https://rootwork.github.io/rootwork.org/tags/nptech/","section":"tags","tags":null,"title":"nptech"},{"body":"","link":"https://rootwork.github.io/rootwork.org/categories/online-advocacy/","section":"categories","tags":null,"title":"Online advocacy"},{"body":"","link":"https://rootwork.github.io/rootwork.org/tags/social-change/","section":"tags","tags":null,"title":"social change"},{"body":"A transcript from my portion of the ‚ÄúBig Idea‚Äù panel on ‚ÄúThe Power of Technology in Advocacy and Organizing‚Äù from the 2014 Nonprofit Technology Conference, March 13-15 in Washington, DC.\nMy background is in community organizing and social movement theory, and that‚Äôs what I‚Äôd like to talk a little bit about today.\nIn popular culture, we have two stories we usually tell about social change ‚Äî two lenses in which we view advocacy and activism.\nThe first is about a charismatic leader. Gandhi led India to freedom. Or Rosa Parks, who one day was too tired to get up and inspired a city to boycott a racist public policy.\nThe second story we tell is about a spontaneous event. Something shifted in the world around us, and people responded in positive ways. Egyptians took to the square to reclaim their democracy.\nWhile both of these stories have kernels of truth ‚Äî events happen, and people inspire ‚Äî they are fundamentally not how social change occurs. Instead, it‚Äôs movement-building work that pushes change forward.\nRosa Parks wasn‚Äôt just tired ‚Äî she was trained.\nThe Egyptian revolution didn‚Äôt just happen, it was preceded by years of student organizing.\nThe most successful social change movements didn‚Äôt just get lucky or figure out how to use the newest tools, they were built through concerted strategic planning. Our work for change can draw on that history and experience.\nCatalyst moments might be unplanned, but the infrastructure can be built.\nIn our organizations, we tend to privilege one set of actions over the other. We focus on important task-based work like website development, fundraising, communications, and the campaign strategy I just mentioned.\nBut there‚Äôs more to an organization and more to a movement than that. There‚Äôs another group of endeavors sometimes called maintenance work, and it flies under the radar even though it‚Äôs crucial to keeping our campaigns afloat.\nMaintenance work involves things like leadership development, facilitating communication, conflict resolution, anti-oppression work, and visioning, the things that fertilize our movements.\nWe often privilege task work over maintenance work. Community knowledge and strategic knowledge is devalued in favor of technical knowledge, because technical knowledge can be more easily measured.\nMeanwhile, movement-building work is disproportionately done by women, leaving men in the ‚Äúimportant‚Äù and visible roles.\nAt its worst, a specialization of knowledge leads to accumulation of informal, unacknowledged power through gatekeeping.\nOr to put it another way, ‚ÄúWe‚Äôll launch that campaign when I‚Äôm ready to update the website for you.‚Äù\nIn our organizations, we should be striving toward social change, not startup culture. We should cultivate sustainable work. We should commit to anti-oppression work so we don‚Äôt replicate the unequal society we‚Äôre trying to improve. We should provide benefits rather than relying on a precarious workforce of independent contractors. We should pay our interns. We should allow staff to unionize, or become a worker-owned collective.\nAnd in general, we should remember that social change is not a business. We should be ruthless in stealing ideas from the business community, but we should not expect them to work for us just because they made people some money.\nIn closing, my one piece of advice is in addition to all the Twitter guides and fundraising how-tos in your tool belt, explore some movement history. Whether it‚Äôs Poor People‚Äôs Movements about work against economic injustice, I‚Äôve Got the Light of Freedom or Southern Labor and Black Civil Rights about the black-led freedom struggle\nOr maybe my little article in this recent publication by Green Memes. Investigate how sustainable social change has transpired in the past, and you‚Äôll be closer to effecting change in the future.\n","link":"https://rootwork.github.io/rootwork.org/blog/2014/03/online-advocacy-learn-community-organizing/","section":"blog","tags":["activism","nptech","social change"],"title":"What online advocacy can learn from community organizing"},{"body":"","link":"https://rootwork.github.io/rootwork.org/blog/2013/","section":"year","tags":null,"title":"Archives: 2013"},{"body":"","link":"https://rootwork.github.io/rootwork.org/blog/2013/05/","section":"month","tags":null,"title":"Archives: May 2013"},{"body":"","link":"https://rootwork.github.io/rootwork.org/tags/css/","section":"tags","tags":null,"title":"CSS"},{"body":"This is an¬†intervention.\nCSS is pretty simple. Classes, IDs, elements and pseudo-elements, with style definitions attached to each. Calling it a ‚Äúlanguage‚Äù is a bit of a stretch (though preprocessors like Sass fit the¬†bill).\nBut let‚Äôs be honest, for years our stylesheets cascaded right on out to¬†infinity.\nHuge files with table-of-contents comments to try to make some sense of it ‚Äî until a quick fix got pasted down at the bottom. Brittle style definitions relying on tight coupling with HTML structure. Pieces of styles being replicated here and there for different components with similar features, without any way to tell they were related in the¬†CSS.\nMy stylesheets were like that too, because strategies for writing CSS had barely altered since the days when it was used to change the colors of the scroll bars in Internet Explorer. Luckily, in the past couple of years both CSS architecture and CSS preprocessors came into their own.\nSMACSS, or Scalable and Modular Architecture for CSS, was developed by Jonathan Snook, a featured speaker at Drupalcon Portland. I‚Äôm really excited to get the opportunity to have Jonathan speak, not only because of my personally well-dog-eared copy of SMACSS, but because Drupal itself is adopting a SMACSS approach to its¬†CSS.\nI spoke with Jonathan about sustainable stylesheets and the future of SMACSS. For an even more detailed look, please join me at Jonathan Snook‚Äôs featured Drupalcon Portland this afternon, Tuesday, May 21 at 4:30¬†PM.\nIB: What‚Äôs the biggest mistake you see people making when writing¬†CSS?\nJS: I think the biggest mistake is thinking of everything in the context of a single page. We‚Äôre no longer just building sites with a design for a home page and an inside page. We‚Äôre developing complex systems that need to work in a variety of contexts and we need a development approach that complements¬†that.\nIB: What‚Äôs the biggest ‚Äúwin‚Äù you see in using the SMACSS approach? Why should frontend developers change their approach to¬†CSS?\nJS: The biggest win is maintainability. The SMACSS methodology makes it easier to build larger projects by breaking things down into smaller components. Like the move from spaghetti code to MVC frameworks on the server side, this separation of concerns on the CSS side improves the process of putting a site or web app¬†together.\nIB: In the last part of your book, you talk about how the SMACSS approach fits in to work using a preprocessor like Sass. There have been a lot of developments in Sass in the past year ‚Äî have they had any positive effects on your use of the SMACSS¬†approach?\nJS: With Sass, the introduction of placeholders was a positive step forward. Overall, Sass (and other preprocessors) are a great way to augment ‚Äî but not replace ‚Äî the way people write¬†CSS.\nIB: What are your thoughts on BEM? Do you see it as compatible with¬†SMACSS?\nJS: I see BEM as very compatible. BEM really enforces naming convention, which is a very important concept in SMACSS. They both take a modular approach to site¬†development.\nIB: What are you tacking next when it comes to CSS and frontend development? Will there be a ‚ÄúSMACSS Part Two‚Äù? Or something else¬†entirely?\nJS: I‚Äôd love to augment SMACSS with case studies and expand on some of the ideas in the book based on things that come up in the workshops I do. I‚Äôd also like to work on a prototyping/site development tool that uses the SMACSS concepts. We had built something like this when I was at Yahoo! that I think many people in the industry would find really useful. Hopefully I can find the time to work on¬†it!\n","link":"https://rootwork.github.io/rootwork.org/blog/2013/05/we-need-talk-about-your-stylesheets-interview-jonathan-snook-drupalcon-portland/","section":"blog","tags":["CSS","Drupal"],"title":"We need to talk about your stylesheets: An interview with Jonathan Snook at Drupalcon Portland"},{"body":"Media queries are a key part of responsive web design, because they control at what width (among other things) different CSS rules kick¬†in.\n‚ÄúBreakpoint makes writing media queries in Sass super simple,‚Äù say Mason Wendell and Sam Richard, creators of the extension to Compass, and they‚Äôre right. It‚Äôs not surprising that we‚Äôd want them to present at Drupalcon, since design in Drupal, like web design everywhere, has been embracing responsive web design as a fundamental principle. (Side note: This website is in the midst of a responsive web design overhaul. Cobbler‚Äôs children and all¬†that.)\nI spoke to Mason and Sam about how Breakpoint makes responsive web design even easier. Don‚Äôt miss their Drupalcon Portland frontend session, ‚ÄúManaging Responsive Web Design with Sass and Breakpoint,‚Äù on Thursday at 10:45 AM.\nIB: What motivated you to create Breakpoint? How has it changed your own¬†workflow?\nMW: Before Sass 3.2 came out I had written an article for The Sass Way that previewed some of it‚Äôs new features, including the ability to use variables in media queries. I created an example that baked in some names for breakpoints into a kind of ‚Äúmaster mixin‚Äù for media queries. On my next responsive project I put the theories I‚Äôd written for that post into practice, and found that I could refine that approach. If I assigned a variable to each media query first the approach would be very flexible. Then when noticed that I wrote min-width queries way more often than any other type I set up defaults that made creating media queries very¬†fast.\nMW: There was a side effect that I think is more useful though. By assigning names to each of my media queries I‚Äôm able to keep them in context in a much more effective way. If I some media queries to deal with the width of a nav element, and then later I add an item to that nav, I can change the value of that variable and all the associated queries are adjusted. This is even more effective when handing code back and forth within a¬†team.\nSR: Breakpoint was created with the motivation to ease many of the pain points of working with media queries in CSS. The biggest pain point that Breakpoint solves is providing meaningful semantics to your media queries. When building content based responsive sites, early in your design process two unrelated items may happen to break at the same points, but as your project grows, those points may change and a simple find and replace will have unintended consequences. This is probably the biggest workflow win to using Breakpoint, all of your media queries now have proper¬†semantics.\nSR: The other big win for my workflow is Breakpoint‚Äôs no-query fallback, allowing me to very easily add in fallback code for any of the media queries I¬†write.\nIB: What can Breakpoint do that just assigning variable names to specific min-widths¬†can‚Äôt?\nSR: For starters, Breakpoint handles much more than min-width queries. It is designed to be future friendly and currently supports all CSS level 3 and level 4 media queries. Additionally, it‚Äôs syntax is easy to use to create complex media queries, including both and and or media queries. It has native handling for all of the different media query requirement for resolution (of which you need to write at least four different queries for currently) while just writing the standard. The no-query fallbacks are a huge win as¬†well.\nMW: The main benefit is that you can assign names and manage your media queries with variables. This helps you avoid having them scattered around your SCSS, and makes is easy to understand how they‚Äôre related and affect each¬†other.\nMW: While Breakpoint is optimized for min-width because they‚Äôre used most often it doesn‚Äôt stop there. There are a number of shortcuts built in, for fencing min- and max- values, converting pixels to ems, and even vendor prefixed queries like¬†resolution.\nMW: We even created a way to Breakpoint to report back to you what queries are in a particular context. Singularity GS uses this feature to kind of magically create responsive grid¬†systems.\nSR: Of all of Breakpoint‚Äôs features, probably the least used, but most powerful is Breakpoint Context. This allows you to call a function anywhere and get the current media query context allowing for amazingly intelligent mixins and functions to be written in Sass, something unique to Breakpoint that you simply don‚Äôt have with interpolating¬†variables.\nIB: Are there any responsive web design aspects specific to Drupal theming/frontend development that Breakpoint helps¬†with?\nSR: There is nothing Drupal specific that Breakpoint helps with. Breakpoint, like Sass, was built to be backend independent. This means that if you are building any site, regardless of if it‚Äôs a Drupal site or a Node site or a static site, Breakpoint is able to do its job handily without being caught up in being tied to a specific backend¬†technology.\nMW: One of the things I love about working with Sass is that it‚Äôs not Drupal-specific, and it‚Äôs meant to be used anywhere on the web. Breakpoint follows that¬†example.\nIB: Is Breakpoint a successor to Respond-To, or will that continue to get¬†developed?\nSR: In a way, yes and no. Respond-To was written before Breakpoint, but upon Breakpoint‚Äôs release, it was decided that our efforts should be focused on a unified Media Query engine, with Respond-To as a wrapper syntax for Breakpoint. This is how the current Respond-To project exists. As of Breakpoint 2.0, the Respond-To mixin has been incorporated into Breakpoint core, so you now can use Respond-To without needing an additional Compass¬†extension!\nIB: Do you use Breakpoints module (in Drupal 8 core)? Or do you just do all of that through¬†Sass?\nSR: I personally truly dislike the Breakpoint module. Every use case I‚Äôve heard for it seems to be based on the thinking that sites have three or four breakpoints and that everything can be boiled down into an easy to use admin interface. There are no standard breakpoints, period, and good, reasonably complex responsive sites will usually have 20 or more breakpoints. Responsive cannot be done from the backend, and the Breakpoint module encourages you to do so (as does the Spark layout initiative).\nIB: Do you think any aspects of Breakpoint might get rolled directly into Sass in the¬†future?\nMW: It‚Äôs possible, but we probably won‚Äôt move the obvious parts to the Sass language. There are some helper functions that we‚Äôve written in Ruby that would be very useful in Sass core. Once that‚Äôs in we‚Äôll be able to offer Breakpoint without¬†Compass.\nSR: I do not believe Breakpoint will be rolled directly into Sass, nor would I want it to be, as it is out of scope of Sass core. As much as I like them, I even think the color functions in Sass are out of scope for it. Sass core should simply be the language and the bare minimum function base for it to be useable. Sass doesn‚Äôt ship with any mixins, and I think it should probably stay that way. That being said, Breakpoint is fairly stable; our 1.3 release stood stable for six or so months without needing any changes until we rewrote the whole thing for our 2.x release, so maybe being merged into Compass isn‚Äôt out of the question, but I do not see a need for¬†that.\nIB: I hear in addition to Breakpoint, Sam went and created some kind of magic box of Sass called Toolkit. Want to say more about¬†that?\nSR: Toolkit started life as RWD Kickstart, a project Mason and I kind of made up on the spot a year ago at one of the first New York Sass meetups. Its original goal was simply to be a collection of Compass templates to make pulling in media query and grid solutions together easily. Since then, it‚Äôs evolved to be more of a collection of Progressive Enhancement, Design in Browser, and Modern Web Development tools, a toolkit if you‚Äôll let me, of useful tools. I‚Äôd say the four biggest thing that Toolkit has are a modern Clearfix mixin, progressive enhancement replace text mixins, a triangle generation mixin, and an intrinsic ratio mixin to make using intrinsic ratios super easy. It also adds *, *:before, *:after { box-sizing: border-box} and img, video { max-width: 100%; height: auto; } to your stylesheets, which are the first two things I do for any responsive¬†project.\nSR: Toolkit‚Äôs templates have also evolved, Where originally there were five some odd different templates to choose from, now there are just two, a basic one to set up a basic partial structure, and a responsive web design one that pulls in Breakpoint 2.x for media queries and Singularity 1.x for¬†grids.\nIB: You sure know those late twentieth-century¬†presidents.\nMW: With a name like Breakpoint, how could I not revisit the cinema classic Point Break. Bodhi and his gang of thrill-seeking bank-robbing surfers evaded the FBI for years until the newly minted Special Agent Johnny Utah was on the case. I think we can all agree that there‚Äôs a poignant metaphor for web designer there. And some pretty sweet¬†GIFs.\n","link":"https://rootwork.github.io/rootwork.org/blog/2013/05/drupalcon-portland-responsive-web-design-snap-breakpoint-sass/","section":"blog","tags":["CSS","Drupal"],"title":"Drupalcon Portland: Responsive web design in a snap with Breakpoint and Sass"},{"body":"","link":"https://rootwork.github.io/rootwork.org/categories/a11y/","section":"categories","tags":null,"title":"a11y"},{"body":"A new theming engine, Twig, is coming along with Drupal 8‚Äôs adoption of the Symfony framework. And it‚Äôs downright¬†magical.\nInstead of having theme functions that have to be overridden, everything becomes an (easy to read, easy to modify) template. Instead of having to figure out render arrays, themers can use consistent template variables. And instead of having insecure output, Twig sanitizes everything by¬†default.\nIf you‚Äôve ever worked on a WordPress or Tumblr theme, the approach will feel pretty similar. Here‚Äôs what it looks¬†like:\nAnd oh by the way, it‚Äôs well-documented ‚Äî no small point in the Drupal¬†community!\nSound too good to be true? Well, it almost might be, because a lot has to happen in order to get this into Drupal 8. There‚Äôs a Twig-focused sprint happening right after Drupalcon, so if you think this is great, come pitch in! Because if things don‚Äôt get done, Twig will be held until Drupal 9. No Drupal themer, veteran or newbie, kitten or human, wants that to¬†happen.\nI spoke to Jen Lampton (with a contribution from Fabian Franz) about how Twig will result in happier veteran Drupal themers, happier new Drupal themers, and happier Drupal kittens. Be sure to show up for their featured Drupalcon session (along with Drupal CSS innovator John Albin Wilkins), ‚ÄúUsing Twig: The new template engine in Drupal 8,‚Äù on Wednesday at 3:45¬†PM.\nIB: What‚Äôs one thing you‚Äôre most excited about with¬†Twig?\nJL: Replacing the template engine with something completely different means that we get to take a good hard look at absolutely everything in the current theme system, so we can do a clean¬†sweep.\nFF: What I love the most about Twig is the syntax, and how it cleverly makes it possible to lazy-render things. The possibilities of having an interpreted language are¬†endless.\nIB: Can theme developers start converting/creating their themes¬†now?\nJL: No! If you have the time to start converting your own themes, then please, please, please use the time to help us make the theme system what you want it to be ‚Äî instead. There will be time to convert your themes later, but Drupal itself can only be monumentally improved right now.\nIB: Will frontend developers and themers coming from other CMSes ‚Äî like WordPress ‚Äî find Twig easier to¬†use?\nJL: Yes. Front end developers coming from everywhere will find Twig easier to use. For starters, Twig looks a lot more like HTML, so if you don‚Äôt know PHP you‚Äôll still be right at home. For people who do know PHP and don‚Äôt know Twig, there will be a learning curve, but it‚Äôs far far FAR less steep than learning about what Drupal had done to¬†PHPTemplate.\nIB: Twig sounds great! What can people do to help make sure it happens for Drupal¬†8?\nJL: There are four main areas where we need help right now, as outlined in our Twig TODO wiki.\nHelp us test all the patches.\nHelp us fix issues with the patches.\nHelp us improve the markup in core (after being converted to Twig).\nHelp us clean up the rest of the theme¬†system.\nIf people are interested in any one of these four areas, they can come to the sprint immediately following DrupalCon and get some hands-on help making Drupal better. We need all the hands we can get since we are up against some major deadlines, so please please please come help¬†us!\n","link":"https://rootwork.github.io/rootwork.org/blog/2013/05/drupal-8-power-twig-drupalcon-portland-featured-session/","section":"blog","tags":["Drupal","Twig"],"title":"Drupal 8 and the power of Twig: A Drupalcon Portland featured session"},{"body":"I‚Äôm a millennial, but even I remember the experience of calling the telephone operator and getting a live human to look up the number of a business or place a collect call. We have the digital means to complete lots of tasks like that today, but that doesn‚Äôt mean all of our methods are equally effective for¬†everyone.\n‚ÄúDrupal 8 will be the most accessible version of Drupal yet,‚Äù declare J. Ren√©e Beach and Wim Leers in their Drupalcon Portland session description.\nThey‚Äôre both part of the Spark team, an initiative to improve the authoring experience in Drupal for¬†everyone.\nSpark is more well known for things like in-place editing and a mobile friendly toolbar, (see image). But from the beginning, improving the experience for everyone has been a big priority, and one of the most exciting developments is a new aural¬†interface.\nThat‚Äôs right, Drupal is getting a switchboard¬†operator:\nOK, so that doesn‚Äôt look terribly exciting all on its own. But trust me, when you watch the videos of people interacting with Drupal 8 and having menus and selections read as they go, it‚Äôs pretty¬†cool.\nWhen I spoke with J. Ren√©e about Drupal 8 and the nature of working on accessibility, the passion for this work really shown through. I‚Äôm really looking forward to their session with Wim, ‚ÄúDrupal Speaks: Aural user interfaces, new Drupal 8 accessibility features,‚Äù on Wednesday at 10:45 AM. Hope to see you¬†there!\nIB: What are we missing when we talk about accessibility right¬†now?\nJRB: I want developers to understand that accessibility is fundamental to user interface development. We tend to talk about accessibility like we talk about gender. Both have coded values. When we speak of being gendered, we are often talking about being non-male. Male is a kind of genderless base state. So is it with accessibility. When we speak of making something accessible, we tend to refer to making an interface for blind users or for users with physical capabilities that make keyboard and mouse use difficult, as examples. Visual is a kind of accessible base¬†state.\nWe risk ‚Äúothering‚Äù folks for whom accessibility is an issue because as developers, in general, non-visual accessibility has not been a primary concern. I know what is is like to be othered. In some ways, highlighting otherness can be an effective way to bring focus to a problem. Eventually though, we need to resolve those issues and close the loop on the otherness. We can be other and also be equal. Now is the time for front end developers to start thinking about accessibility as a multi-modal effort. We no longer have the excuse that the tools and technologies available to us do not support efficient workflows for non-visual UI¬†development.\nIB: Where is Drupal 8 going to do¬†better?\nJRB: Most importantly, we have more individual core contributors this cycle who truly believe in addressing accessibility issues. And they are all smart, wonderful people which makes working with them a¬†pleasure!\nFor example, take this issue about requirement warnings during installation. For a sighted user, a warning during installation is immediately apparent. The missing requirement is made distinct with color contrast. For a blind user, they must traverse every cell in the table to discover a missing requirement. Would we ever impose such a burden on a sight user through the UI? No, not without grumbles in the issue queues at least. With more contributors invested in improving these types of non-visual details, we are polishing all the rough edges ‚Äî the ones we see and the ones we¬†don‚Äôt.\nIB: How important is context in aural¬†interfaces?\nJRB: Context is important to all interfaces. As front end developers we build templates that expose context in a predictable, consumable way. As a practice we have established and then refined patterns of visual expression over the past 30-plus¬†years.\nMetaphors grounded visual pointer displays on a virtual desktop. We talk of visual affordances in rounded, gradient-embellished, reflective buttons. Skeumorphic designs bring our understanding of the physical world to bear on pixels and¬†bits.\nWhere are the metaphors in aural interface design? I know of none. To me, these interfaces are flat. The metal is bare underneath¬†them.\nPerhaps non-visual interfaces have one less level of abstraction to traverse. Maybe there‚Äôs no need to translate language into symbol and then back into language. But that little bit of designer in me, that memory of a linguist I almost was, remembers being thunderstruck with insight reading Jackendoff‚Äôs unfurling of metaphor after I had just so recently fallen smitten with the strict generative grammar of early Chomsky. Jackendoff gives us a way of understanding language that starts at basic physical dichotomies ‚Äî up/down and near/far ‚Äî and from there offers us a model of communication. He gives us pattern. (Early) Chomsky gave us metal. So much that we humans do starts with structure that softens with time to fit our curvy, winding¬†nature.\nI want to believe that the aural interfaces we have today still just the awkward first attempts to build an abstract audio interface pattern language. That non-visual interface design is still working through its structuralist phase. We are still learning how to pack context into denser forms through non-visual¬†expressions.\nIB: Will the Drupal 8 improvements have things to offer module¬†developers?\nJRB: In Drupal 8, we are building tools that manage a couple of the trickier components of accessibility in a browser. These¬†are:\nOutputting audio updates\nManaging tabbing in constrained¬†workflows\nModule developers will be able to pass a string to a method called ‚Äúannounce‚Äù on the Drupal object and have that string read by a screen¬†reader.\nAnother method on the Drupal object called ‚ÄútabbingManager‚Äù will constrain tabbable elements on the page. A developer will select those elements, either through JavaScript methods or jQuery, and pass them to the tabbingManager. Tabbing is then constrained to those elements until the constraint is superseded or released. I know that must not be completely clear, but that‚Äôs why we‚Äôre presenting a session about aural user interfaces and how we can use these new tools to build them!\n","link":"https://rootwork.github.io/rootwork.org/blog/2013/05/drupal-8-aural-interfaces-groundbreaking-accessibility-drupalcon-portland/","section":"blog","tags":["Drupal"],"title":"Drupal 8, aural interfaces and groundbreaking accessibility at Drupalcon Portland"},{"body":"","link":"https://rootwork.github.io/rootwork.org/tags/twig/","section":"tags","tags":null,"title":"Twig"},{"body":"","link":"https://rootwork.github.io/rootwork.org/series/","section":"series","tags":null,"title":"Series"}]