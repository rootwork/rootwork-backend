//
// Mixins
//

/// The micro clearfix.
///
/// @author Thierry Koblentz
/// @link http://cssmojo.com/latest_new_clearfix_so_far/
/// @group Utilities

@mixin clearfix {
  &:after {
    content:"";
    display:table;
    clear:both;
  }
}

/// Use calculateRem to insert pixel and rem font-size values.
///
/// @link http://www.stubbornella.org/content/2013/07/01/easy-peasy-rem-conversion-with-sass/
/// @author Fiona Chan
///
/// @requires calculateRem
///
/// @param {font-size} $size - Font size in pixels
///
/// @example scss - Sass
///   .title {
///     @include font-size(36px);
///   }
///
/// @example scss - CSS output
///   .title {
///     font-size: 36px;
///     font-size: 2.25rem;
///   }
/// @group Utilities

@mixin font-size($size) {
  font-size: $size;
  font-size: calculateRem($size);
}

/// Simple vertical alignment.
///
/// @author Sebastian Ekström
/// @link http://zerosixthree.se/vertical-align-anything-with-just-3-lines-of-css/
///
/// @example scss - Sass
///   .foo {
///     @include vertical-align;
///   }
///
/// @example scss - CSS output
///   .foo {
///     position: relative;
///     top: 50%;
///     transform: translateY(-50%);
///     transform-style: preserve-3d;
///   }
/// @group Utilities

@mixin vertical-align {
  position: relative;
  top: 50%;
  transform: translateY(-50%);
  transform-style: preserve-3d;
}

/// Removes inline-block padding bug.
///
/// @link http://stackoverflow.com/a/5256640
/// @author Ivan Boothe
///
/// @example scss - Sass
///   ul.with-inline-blocks {
///     @include no-block-padding;
///   }
///
/// @example scss - CSS output
///   ul.with-inline-blocks {
///     font-size: 0;
///   }
/// @group Utilities

@mixin no-block-padding {
  font-size: 0;
}

/// Removes flash when scaling in older versions of Safari. Note this needs to
/// be placed on the item in its default state — before it is hovered, scrolled,
/// etc.
///
/// @link http://viget.com/inspire/webkit-transform-kill-the-flash
/// @author Dan Tello
///
/// @example scss - Sass
///   .item {
///     height: 68px;
///     @include no-scale-flash;
///   }
///
///   .item:hover {
///     height: 50px;
///     transition: all 0.3s easeIn;
///   }
///
///   .is-scrolled .item {
///     height: 25px;
///     animation: scaleIn 0.75s;
///   }
///
/// @example scss - CSS output
///   .item {
///     height: 68px;
///     -webkit-transform: translateZ(0);
///   }
///
///   .item:hover {
///     height: 50px;
///     transition: all 0.3s easeIn;
///   }
///
///   .is-scrolled .item {
///     height: 25px;
///     animation: scaleIn 0.75s;
///   }
/// @group Utilities

@mixin no-scale-flash {
  -webkit-transform: translateZ(0);
}

/// Gives a card depth effect.
///
/// @param {Number} $depth - depth level (between 1 and 5)
///
/// @link http://www.google.com/design/spec/layout/layout-principles.html#layout-principles-dimensionality Google Design
/// @author Hugo Giraudel
///
/// @requires {function} top-shadow
/// @requires {function} bottom-shadow
///
/// @group Utilities
@mixin card($depth) {
  @if $depth < 1 {
    box-shadow: none;
  } @else if $depth > 5 {
    @warn "Invalid $depth `#{$depth}` for mixin `card`.";
  } @else {
    box-shadow: bottom-shadow($depth), top-shadow($depth);
  }
}
